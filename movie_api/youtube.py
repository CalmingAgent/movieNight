import json
import requests
import pickle

from typing import Optional, Tuple
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

from ..settings import (
    YOUTUBE_SEARCH_URL, YOUTUBE_API_KEY,
    CLIENT_SECRET_PATH, USER_TOKEN_PATH, YOUTUBE_SCOPES
)
from ..utils    import normalize, fuzzy_match, log_debug

def search_youtube_api(query: str) -> Optional[Tuple[str, str]]:
    """Return (video_url, title) for the first short YouTube result."""
    params = {
        "part": "snippet", "q": query, "key": YOUTUBE_API_KEY,
        "videoDuration": "short", "maxResults": 1, "type": "video"
    }
    try:
        resp = requests.get(YOUTUBE_SEARCH_URL, params=params, timeout=10)
        items = resp.json().get("items", [])
        if items:
            vid_id = items[0]["id"]["videoId"]
            title  = items[0]["snippet"]["title"]
            return f"https://www.youtube.com/watch?v={vid_id}", title
    except Exception as e:
        log_debug(f"YouTube search error: {e}")
    return None

def locate_trailer(sheet: str, title: str) -> Tuple[str | None, str, str | None]:
    """
    1) Try local JSON (sheetTitleUrls.json),
    2) Fuzzy-match title,
    3) Fallback to YouTube search.
    Returns (url, source, api_title_if_any).
    """
    from pathlib import Path
    from ..temp_modules.json_functions import load_json_dict
    from ..settings import TRAILER_FOLDER
    json_path = TRAILER_FOLDER / f"{sheet.replace(' ', '')}Urls.json"
    data = load_json_dict(json_path)
    norm_map = {normalize(k): v for k, v in data.items()}
    key = normalize(title)

    if url := norm_map.get(key) or norm_map.get(fuzzy_match(key, list(norm_map)) or ""):
        return url, "json", None

    if result := search_youtube_api(f"{title} official trailer"):
        return result[0], "youtube", result[1]

    return None, "", None

def get_youtube_service():
    """Authenticate with OAuth and return a YouTube Data API client."""
    creds = None
    if USER_TOKEN_PATH.exists():
        creds = pickle.loads(USER_TOKEN_PATH.read_bytes())

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(str(CLIENT_SECRET_PATH), YOUTUBE_SCOPES)
            creds = flow.run_local_server(port=0)
        USER_TOKEN_PATH.write_bytes(pickle.dumps(creds))

    return build("youtube", "v3", credentials=creds)

def create_youtube_playlist(title: str, video_ids: list[str]) -> str | None:
    """Create an unlisted YouTube playlist and return its URL."""
    try:
        svc = get_youtube_service()
        pl = svc.playlists().insert(
            part="snippet,status",
            body={
                "snippet": {"title": title, "description": "Auto-generated by Movie Night"},
                "status":  {"privacyStatus": "unlisted"}
            }
        ).execute()
        pid = pl["id"]
        for vid in video_ids:
            svc.playlistItems().insert(
                part="snippet",
                body={"snippet": {"playlistId": pid, "resourceId": {"kind": "youtube#video", "videoId": vid}}}
            ).execute()
        return f"https://www.youtube.com/playlist?list={pid}"
    except Exception as e:
        log_debug(f"YouTube playlist error: {e}")
    return None
